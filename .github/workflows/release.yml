name: Release (tagged)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g. v1.2.3)"
        required: false

jobs:
  build-and-release:
    strategy:
      matrix:
        include:
          - arch: x86_64
            runs-on: [self-hosted, Linux, X64, prod]
          - arch: arm64
            runs-on: ubuntu-24.04-arm
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: write
    env:
      BUILD_TYPE: Release
      INSTALL_DIR: ${{ github.workspace }}/install

    steps:
      - name: Install dependencies (ARM only)
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build nodejs npm qt6-base-dev qt6-svg-dev qt6-wayland-dev libqt6svg6 libprotobuf-dev cmark-gfm layer-shell-qt liblayershellqtinterface-dev libqalculate-dev libminizip-dev libabsl-dev libcmark-gfm-dev zlib1g-dev qtkeychain-qt6-dev librapidfuzz-cpp-dev
          echo "Qt6_DIR=/usr/lib/aarch64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV

      - name: Resolve tag
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ inputs.tag || '' }}"
            if [[ -z "$TAG" ]]; then
              echo "When dispatching manually, you must provide 'tag' (e.g. v1.2.3)." >&2
              exit 1
            fi
          else
            TAG="${GITHUB_REF_NAME}"
          fi

          # Optional: validate tag format like v1.2.3 (allow v1 or v1.2 etc.)
          if ! [[ "$TAG" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
            echo "Tag '$TAG' does not match expected format (e.g. v1.2.3)." >&2
            exit 1
          fi

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "artifact=vicinae-linux-${{ matrix.arch }}-$TAG.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.meta.outputs.tag }}

      - name: Prepare dirs
        run: mkdir -p build install

      - name: Configure CMake
        run: |
          cd build
          cmake -G Ninja .. \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5  \
            -DLTO=ON \
            -DUSE_SYSTEM_PROTOBUF=OFF \
            -DUSE_SYSTEM_ABSEIL=OFF \
            -DUSE_SYSTEM_CMARK_GFM=OFF \
            -DUSE_SYSTEM_MINIZIP=OFF  \
            -DCMAKE_PREFIX_PATH="$Qt6_DIR" \
            -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}

      - name: Build
        run: |
          cmake --build build --config ${BUILD_TYPE} --parallel $(nproc)

      - name: Install
        run: |
          cd build
          cmake --install . --config ${BUILD_TYPE}

      - name: Package (tar install dir)
        run: |
          cd "${INSTALL_DIR}"
          tar -czvf "${{ github.workspace }}/${{ steps.meta.outputs.artifact }}" .

      - name: Create GitHub Release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.tag }}
          generate_release_notes: true
          files: |
            ${{ steps.meta.outputs.artifact }}

